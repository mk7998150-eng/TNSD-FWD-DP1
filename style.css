`css
/ Root variables for easy theming /
:root {
  --bg: #0f172a;
  --panel: #111827;
  --text: #e5e7eb;
  --muted: #9ca3af;
  --accent: #22d3ee;
  --user: #1f2937;
  --bot: #0b132b;
  --ring: #22d3ee33;
}

/ Page /
* { box-sizing: border-box; }
html, body {
  height: 100%;
  margin: 0;
  background: radial-gradient(1000px 600px at 20% -10%, #0b1220, var(--bg));
  color: var(--text);
  font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

/ App container /
.chat-app {
  max-width: 880px;
  height: 100%;
  margin: 0 auto;
  display: grid;
  grid-template-rows: auto 1fr auto;
  gap: 14px;
  padding: 18px;
}

/ Header /
.chat-header {
  display: flex;
  align-items: center;
  gap: 10px;
}
.chat-header .dot {
  width: 10px; height: 10px; border-radius: 50%; background: var(--accent);
  box-shadow: 0 0 12px var(--accent);
}
.chat-header h1 {
  font-size: 18px;
  margin: 0;
  color: #f3f4f6;
}
.chat-header .sub {
  font-size: 12px; color: var(--muted);
}

/ Messages /
.chat-log {
  background: linear-gradient(180deg, #0c1222, var(--panel));
  border: 1px solid #1f2937;
  border-radius: 12px;
  padding: 12px;
  overflow-y: auto;
  box-shadow: 0 10px 40px rgba(0,0,0,0.25);
}

.message {
  display: grid;
  grid-template-columns: 40px 1fr;
  gap: 10px;
  padding: 10px;
  border-radius: 10px;
  transition: background 120ms ease;
}
.message + .message { margin-top: 6px; }
.message:hover { background: rgba(255,255,255,0.02); }

.avatar {
  width: 40px; height: 40px; border-radius: 50%;
  display: grid; place-items: center;
  background: #0b1220; color: #a5b4fc; font-weight: 700;
  border: 1px solid #1f2937;
}
.avatar.user { color: #93c5fd; }
.avatar.bot { color: #34d399; }

.bubble {
  position: relative;
  padding: 12px 14px;
  border-radius: 12px;
  background: #0f1629;
  border: 1px solid #1f2937;
  color: #e5e7eb;
  line-height: 1.5;
}
.bubble.user {
  background: var(--user);
}
.bubble.bot {
  background: var(--bot);
}

/ Typing indicator /
.typing {
  display: inline-flex; align-items: center; gap: 6px;
}
.typing .dot {
  width: 6px; height: 6px; border-radius: 50%; background: #a5b4fc;
  animation: bounce 1.2s infinite ease-in-out;
}
.typing .dot:nth-child(2) { animation-delay: 0.15s; }
.typing .dot:nth-child(3) { animation-delay: 0.3s; }

@keyframes bounce {
  0%, 80%, 100% { transform: translateY(0); opacity: 0.4; }
  40% { transform: translateY(-4px); opacity: 1; }
}

/ Footer/input /
.chat-input {
  display: flex;
  gap: 10px;
  align-items: center;
  background: #0c1222;
  border: 1px solid #1f2937;
  padding: 10px;
  border-radius: 12px;
  box-shadow: 0 10px 30px rgba(0,0,0,0.25);
}

.chat-input textarea {
  flex: 1;
  resize: none;
  min-height: 46px;
  max-height: 140px;
  padding: 12px 14px;
  background: #0b1324;
  color: var(--text);
  border: 1px solid #1f2937;
  border-radius: 10px;
  outline: none;
  transition: border 120ms, box-shadow 120ms;
}

.chat-input textarea:focus {
  border-color: var(--accent);
  box-shadow: 0 0 0 4px var(--ring);
}

.button {
  display: inline-flex; align-items: center; justify-content: center;
  height: 46px; padding: 0 16px;
  background: linear-gradient(180deg, #0ea5e9, #06b6d4);
  border: none; color: white; border-radius: 10px;
  font-weight: 600; cursor: pointer;
  box-shadow: 0 6px 20px rgba(34, 211, 238, 0.35);
  transition: transform 100ms ease, filter 120ms;
}
.button:active { transform: translateY(1px); }
.button:disabled {
  filter: grayscale(0.8) brightness(0.7);
  cursor: not-allowed;
}

/ Scrollbar (WebKit) /
.chat-log::-webkit-scrollbar { width: 10px; }
.chat-log::-webkit-scrollbar-thumb {
  background: #1f2937;
  border-radius: 10px;
}
.chat-log::-webkit-scrollbar-track { background: transparent; }

/ Mobile tweaks /
@media (max-width: 520px) {
  .chat-app { padding: 12px; }
  .bubble { font-size: 14px; }
  .chat-input textarea { font-size: 14px; }
}
`

---

Chatbot JavaScript (app.js)

`js
// Minimal HTML structure expected (example):
// <div class="chat-app">
//   <div class="chat-header"><div class="dot"></div><h1>Nova</h1><div class="sub">Your quick AI helper</div></div>
//   <div id="log" class="chat-log"></div>
//   <div class="chat-input">
//     <textarea id="input" placeholder="Ask me anything..."></textarea>
//     <button id="send" class="button">Send</button>
//   </div>
// </div>

const $ = (sel, root = document) => root.querySelector(sel);

const logEl = $('#log');
const inputEl = $('#input');
const sendBtn = $('#send');

// Basic "AI" intent rules (you can extend these)
const intents = [
  {
    name: 'greeting',
    test: (t) => /\b(hi|hello|hey|namaste|vanakkam)\b/i.test(t),
    reply: () => pick([
      'Hey! What are you curious about today?',
      'Hello there — ready when you are.',
      'Hi! Ask me anything.'
    ])
  },
  {
    name: 'time',
    test: (t) => /\b(time|clock|what.*time)\b/i.test(t),
    reply: () => new Date().toLocaleString()
  },
  {
    name: 'weather',
    test: (t) => /\b(weather|rain|sunny|temperature)\b/i.test(t),
    reply: () => 'I can’t fetch live weather here, but you can tell me your city and what you’re seeing.'
  },
  {
    name: 'farewell',
    test: (t) => /\b(bye|goodbye|see you|later)\b/i.test(t),
    reply: () => 'Take care. Come back when you want to explore more.'
  }
];

function pick(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

// Render helpers
function addMessage(role, text, { typing=false } = {}) {
  const row = document.createElement('div');
  row.className = 'message';

  const avatar = document.createElement('div');
  avatar.className = avatar ${role};
  avatar.textContent = role === 'user' ? 'U' : 'N';

  const bubble = document.createElement('div');
  bubble.className = bubble ${role};

  if (typing) {
    bubble.innerHTML = `
      <span class="typing">
        <span class="dot"></span><span class="dot"></span><span class="dot"></span>
      </span>
    `;
  } else {
    bubble.textContent = text;
  }

  row.appendChild(avatar);
  row.appendChild(bubble);
  logEl.appendChild(row);
  logEl.scrollTop = logEl.scrollHeight;

  return { row, bubble };
}

function setTyping(node, on) {
  if (!node) return;
  node.innerHTML = on
    ? <span class="typing"><span class="dot"></span><span class="dot"></span><span class="dot"></span></span>
    : node.textContent;
}

// “AI” pipeline: simple rule match with a fallback generator
async function generateReply(prompt) {
  const text = prompt.trim();
  if (!text) return 'Say something and I’ll follow.';

  // Try intents
  const hit = intents.find((i) => i.test(text));
  if (hit) return hit.reply(text);

  // Tiny heuristic replies
  if (/\?$/.test(text)) {
    return 'Good question. What makes you ask that?';
  }
  if (text.length < 10) {
    return 'Tell me a bit more so I can be useful.';
  }
  // Reflective default
  return I’m hearing: "${text}". What part matters most to you right now?;
}

// Send flow
async function handleSend() {
  const value = inputEl.value;
  if (!value.trim()) return;

  inputEl.value = '';
  sendBtn.disabled = true;

  addMessage('user', value);

  const { bubble } = addMessage('bot', '', { typing: true });

  // Simulate thinking
  await delay(300 + Math.random() * 400);

  const reply = await generateReply(value);

  // Replace typing with reply
  bubble.textContent = reply;
  sendBtn.disabled = false;
  logEl.scrollTop = logEl.scrollHeight;
}

function delay(ms) {
  return new Promise((res) => setTimeout(res, ms));
}

// Wire events
sendBtn?.addEventListener('click', handleSend);
inputEl?.addEventListener('keydown', (e) => {
  if (e.key === 'Enter' && !e.shiftKey) {
    e.preventDefault();
    handleSend();
  }
});

// OPTIONAL: Hook up to your backend AI endpoint instead of generateReply()
// async function generateReply(prompt) {
//   const res = await fetch('/api/chat', {
//     method: 'POST',
//     headers: { 'Content-Type': 'application/json' },
//     body: JSON.stringify({ prompt })
//   });
//   if (!res.ok) throw new Error('Request failed');
//   const data = await res.json();
//   return data.reply;
// }
